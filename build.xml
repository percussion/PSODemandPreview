<project name="PSODemand" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
	Demand Publishing with Preview CM System
	   This build file depends on Ivy 2.0    
    </description>
	
	<!-- =================================
	Download and install Ivy2 from http://ant.apache.org/ivy
    Modify your Ant runtime preferences in Eclipse to include the Ivy JARs
    Setup your ivy-local.properties  for your user / environment (see the sample file)
    
    If you want to use the testbuild target, you will need Environment 
    variables for RHYTHMYX_HOME and RHYTHMYX_SERVICE. 
    
    To build for the first time: 
    1) Run the ivy-retrieve target
    2) In Project Properties, add all JARs in the ivylib folder to 
    the build path. 
    3) Build (using the testbuild and dist targets)
    4) If your project produces JARs to be re-used by other 
    projects, run the ivy-publish target 
    
    You should occasionally refresh the (with ivy-retrieve) and
    do ivy-publish each time a new build is released. 
    
   	-->
	<!-- set global properties for this build -->
    
	<property environment="env"/>
	<property name="rhythmyx.version" value="7.2" />
	<!-- these variables are used for deploying to the local test instance
	of Rhythmyx --> 
	<!-- base directory of Rhythmyx installation --> 
	<property name="rhythmyx.home" location="${env.RHYTHMYX_HOME}"/>
	<!-- name of Rhythmyx Service -->
	<property name="rhythmyx.service" value="${env.RHYTHMYX_SERVICE}"/>
	
	<!-- name of our output jar  --> 
	<property name="jarname" value="pso-demand-preview.${rhythmyx.version}.jar" />	
	<!-- name of our distribution zip -->
	<property name="distfile" value="pso-demand-preview-${rhythmyx.version}.zip" />	
	<!-- this zip file is generated by the remotetest target --> 
	<property name="testdistfile" value="pso-demand-preview-${rhythmyx.version}-test.zip" /> 
	
	<!-- some directories for deployment to the local test Rhythmyx --> 
	<property name="rhythmyx.deploy" value="${rhythmyx.home}/AppServer/server/rx/deploy" /> 
	<property name="rhythmyx.rxapp"  value="${rhythmyx.deploy}/rxapp.ear/rxapp.war" /> 
	<property name="rhythmyx.rxpub"  value="${rhythmyx.deploy}/RxServices.war"/> 
	<property name="rhythmyx.rxapp.lib"    value="${rhythmyx.rxapp}/WEB-INF/lib"/>
	<property name="rhythmyx.server.lib"  value="${rhythmyx.home}/AppServer/server/rx/lib" /> 
	<property name="rhythmyx.rxapp.spring-config"
	value="${rhythmyx.rxapp}/WEB-INF/config/user/spring" />
	<property name="rhythmyx.rxapp.WEB-INF" value="${rhythmyx.rxapp}/WEB-INF" />

	<!-- relative paths for local folders -->
	<property name="src" location="src"/>
	<property name="test" location="test" /> 
	<property name="lib" location="lib"/>
	
	<!-- more relative paths.  Make sure these are not in Subversion --> 
	<property name="bin" location="bin"/>
	<property name="ivylib" location="ivylib" /> 
	<property name="apidoc" location="apidoc" />
	
	<!-- used for running Windows commands --> 
	<property name="comspec" location="${env.ComSpec}"/>
	<property name="cdrive" location="${env.USERPROFILE}"/> 
	
	<!-- Rhythmyx classpath  --> 
	<path id="rx.class.path"> 
		 <fileset dir="${ivylib}">
		 	<include name="**.jar"/>
		 </fileset>
		</path>
	

	<target name="init">
		<!-- Create the time stamp for build.properties -->
		<tstamp/>
	</target>
	
	<!-- 
	clean the ivy cache and throw away any local copies of downloaded JARs  
	-->
	<target name="ivy-clean" depends="ivy-configure">
		<ivy:cleancache />
		<delete dir="${ivylib}" /> 
		<mkdir dir="${ivylib}" />
	</target>
	
	<!--
	Clean up the local build folders 
	-->
	<target name="clean" description="clean up">
		<delete dir="${bin}"/>
		<mkdir dir="${bin}"/>
	</target>
	
	<!-- 
	load the ivy configuration.  See ivysettings.xml 
	-->
	<target name="ivy-configure">
	   <ivy:settings  />
    </target>

	<!-- resolve dependencies --> 
	<target name="ivy-resolve" depends="ivy-configure" >
	   <ivy:resolve conf="test,optional"/> 
	</target>
	
	<!-- retrieve all dependency JARs to the local ivylib folder --> 
	<target name="ivy-retrieve" depends="ivy-resolve">
	   <ivy:retrieve pattern="${ivylib}/[artifact].[ext]" type="jar" conf="test" />   	
	</target>
    
	<!-- report on dependencies -->
	<target name="ivy-report" depends="ivy-resolve">
	   <ivy:report conf="test,optional"  graph="false" /> 
	</target>
	<!--
	You should only publish this project to Ivy if it produces
	JARs that will be used by other projects.   
    -->
	<!-- Uncomment this target to enable publishing
	<target name="ivy-publish" depends="ivy-resolve"  >
		<ivy:publish resolver="foo-shared-sftp" forcedeliver="true"  
			pubrevision="1.0" overwrite="true" 
			conf="default" status="integration" >
			<artifacts pattern="${lib}/[artifact]-[revision].[ext]" /> 
		</ivy:publish>
	</target>
	-->
	
	<target name="compile" description="compile the source ">
		<!-- Compile the java code from ${src} into ${bin} -->
		<javac srcdir="${src}" destdir="${bin}" debug="true" source="1.5" target="1.5" classpathref="rx.class.path" />
		<javac srcdir="${test}" destdir="${bin}" debug="true" source="1.5" target="1.5" classpathref="rx.class.path" />
		<copy todir="${bin}">
    		<fileset dir="${src}">
      			<include name="**/*.xml"/>
    			<include name="**/*.properties" />
    		</fileset>
    		<fileset dir="${test}">
      			<include name="**/*.xml"/>
    			<include name="**/*.properties" />
    		</fileset>

  		</copy>
	</target>
	
	<target name="unittest" depends="compile" description="run unit tests">
		<property name="build-test-results" location="${bin}/test-results" />
		<delete dir="${build-test-results}" />
		<mkdir dir="${build-test-results}" />
		<junit printsummary="yes" haltonerror="yes">
			<classpath>
				<path location="${bin}" />
				<path refid="rx.class.path" />  
			</classpath>
			<formatter type="plain" />
			<batchtest fork="yes" todir="${build-test-results}">
				<fileset dir="${test}">
					<include name="test/percussion/**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<!-- adds javadoc to the apidoc folder  --> 
	<target name="javadoc" depends="compile">
		<mkdir dir="apidoc"/>
		<javadoc destdir="apidoc" private="true" use="yes" 
		windowtitle="${ant.project.name}">
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="com/percussion/**"/>	
				<exclude name="test/percussion/**"/>
			</packageset>
			<classpath refid="rx.class.path"/>
		</javadoc>
	</target>
	
	<target name="jarbuilder" depends="compile" description="just build the jar ">	    
		<propertyfile file="${bin}/build.properties">
			<entry key="build.number" value="${build.number}"/>
			<entry key="build.date" type="date" pattern="EEEE MMM dd yyyy" value="now"/>
    	</propertyfile>
		<jar jarfile="${lib}/${jarname}" basedir="${bin}">
			<include name="com/percussion/pso/**"/>
			<exclude name="log4j.properties" /> 
			<include name="build.properties" /> 
			<include name="readme.txt" />			
		</jar>

	</target>
	
		
	<!-- installs any extensions on the local Rhythmyx instance --> 
	<target name="installExtensions">
		<java classname="com.percussion.util.PSExtensionInstallTool" fork="true">
		    <arg value="${rhythmyx.home}" />
			<arg value="${basedir}" />
			<classpath>
			    <fileset dir="${rhythmyx.rxapp.lib}">
			    	<include name="rxserver.jar"/>
			    	<include name="rxclient.jar"/> 
			    	<include name="rxutils.jar" />
			    	<include name="rxservices.jar" />
			    	<include name="rxbusiness.jar" /> 
			    	<include name="commons-lang*.jar"/> 
			    	<include name="commons-jexl*.jar"/>
			    	<include name="jcr*.jar" /> 
			    	<include name="commons-logging*.jar" /> 
			    	<include name="commons-collections*.jar" /> 
			    	<include name="commons-httpclient*.jar" /> 
				</fileset>
			    <fileset dir="${rhythmyx.home}/AppServer/lib/endorsed" >
				    <include name="xml-apis.jar" />
			    </fileset>
				<fileset dir="${rhythmyx.home}/AppServer/server/rx/lib">
					<include name="javax.servlet.jar" /> 
		    	</fileset>				
			</classpath>			
		</java>     
	</target>
	
	<!-- runs the test build on the local machine. 
	  You must have RHYTHMYX_HOME and RHYTHMYX_SERVICE defined -->
	<target name="testbuild" description="build for local test">	
		<fail unless="rhythmyx.home" message="You must set the RHYTHMYX_HOME environment variable"/>
		<fail unless="rhythmyx.service" message="You must set the RHYTHMYX_SERVICE environment variable"/>
				
		<echo>Stopping ${rhythmyx.service}</echo>
		
		<exec executable="net.exe" failonerror="false">
			<arg line="stop ${rhythmyx.service}"/>
			<env key="COMSPEC" path="${comspec}"/>
		</exec>
		<property name="build.number" value="test build" /> 
		<antcall target="jarbuilder"/>
		<delete file="${rhythmyx.home}/AppServer/server/rx/log/server.log" verbose="true" failonerror="false" />
		<copy file="${lib}/${jarname}" todir="${rhythmyx.rxapp.lib}" verbose="true" />
		<copy todir="${rhythmyx.rxapp.WEB-INF}" verbose="true" >
			<fileset dir="WEB-INF" />
		</copy>
		<!--copy file="mybeans.xml" todir="${rhythmyx.rxapp.spring-config}" verbose="true" /  -->
		<echo>waiting for shutdown...</echo>
	    <sleep seconds="5" /> 
		<echo>Restarting ${rhythmyx.service}</echo>
		<exec executable="net.exe" failonerror="true">
			<arg line="start ${rhythmyx.service}"/>
			<env key="COMSPEC" path="${comspec}"/>
		</exec>
	</target>
	
	<!-- build a zip file for deployment on a remote test server --> 
	<target name="remotetest" description="Build for remote test">
		<property name="build.number" value="test build" /> 
		<antcall target="jarbuilder"/>
		<zip destfile="${testdistfile}">						
			<zipfileset dir="${lib}" includes="${jarname}" prefix="lib" />
			<fileset dir="." includes="readme.txt, build.number, deploy.xml" />
			<fileset dir="." includes="license.txt, Extensions.xml" />
			<fileset dir="." includes="install.sh, Install.bat" /> 
			<zipfileset dir="WEB-INF" prefix="WEB-INF" />
		</zip>
	</target>
	
	<!-- build the production distribution zip file --> 
	<target name="dist" depends="init, clean, javadoc" description="generate the distribution">
		<buildnumber/>
		<antcall target="jarbuilder"/>	
		<zip destfile="${distfile}">						
			<zipfileset dir="${lib}" includes="${jarname}" prefix="lib" />
			<fileset dir="." includes="readme.txt, build.number, deploy.xml" />
			<fileset dir="." includes="license.txt, Extensions.xml" />
			<fileset dir="." includes="install.sh, Install.bat" /> 
			<zipfileset dir="WEB-INF" prefix="WEB-INF" />
			<zipfileset dir="${apidoc}" prefix="javadoc"/>			
		</zip>
	</target>	


</project>